<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>BeatVortex â€“ Developer Guide</title><link>/docs/developer/</link><description>Recent content in Developer Guide on BeatVortex</description><generator>Hugo -- gohugo.io</generator><atom:link href="/docs/developer/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Installer Logic</title><link>/docs/developer/installers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/developer/installers/</guid><description>
&lt;div class="pageinfo pageinfo-primary">
&lt;p>The information below &lt;strong>only&lt;/strong> applies to BeatVortex versions from 0.3 onwards. Installation logic was completely rebuilt in 0.3.0.&lt;/p>
&lt;/div>
&lt;p>BeatVortex's installation logic is &lt;em>slightly&lt;/em> over-engineered in order to meet a few design goals:&lt;/p>
&lt;ol>
&lt;li>Handle different mod types invisibly&lt;/li>
&lt;li>Abstract away the actual download source of a mod&lt;/li>
&lt;li>Handle both installation and metadata in a Vortex-friendly way.&lt;/li>
&lt;/ol>
&lt;h3 id="background">Background&lt;/h3>
&lt;p>As it stands, BeatVortex only registers a single installer (&lt;code>bs-content&lt;/code>) to Vortex and handles all the rest of the installation logic inside that one installer. That means this installer handles all the available mod types: BeatMods-style plugin mods, song maps (from BeatSaver or not), models (from ModelSaber or not) and a generic fallback for anything else.&lt;/p>
&lt;p>One of the biggest conceptual changes is differentiating the mod type and the mod source. The mod type will control how BeatVortex creates install instructions, and varies for plugins, maps, models or generic files. The mod source will control how BeatVortex provides metadata about the mod and varies for the supported sources: BeatMods, BeatSaver/BeastSaber, and ModelSaber.&lt;/p>
&lt;p>The &lt;code>FileInstaller&lt;/code> interface is used by an installer implementation for a mod &lt;em>type&lt;/em> and controls how install instructions are created from a given file list. The &lt;code>ModInstaller&lt;/code> interface is a higher-level wrapper over the &lt;code>FileInstaller&lt;/code> that can be used for a mod &lt;em>source&lt;/em> to encapsulate both the expected file format (from a &lt;code>FileInstaller&lt;/code>) and handle any install-time metadata, by returning &lt;code>attribute&lt;/code> instructions with the install instructions.&lt;/p>
&lt;h3 id="future-refactoring">Future Refactoring&lt;/h3>
&lt;p>This new system will probably be refactored again in a future release. As it stands, BeatVortex is doing a lot of installation logic that Vortex could really be doing. Future releases will likely replace the existing &lt;code>ModInstaller&lt;/code>/&lt;code>FileInstaller&lt;/code> layer with a combination of new Vortex-registered installers and improved metadata handling. Raise a GitHub issue before doing any drastic work around mod installation.&lt;/p></description></item><item><title>Docs: Dependency Management</title><link>/docs/developer/dependencies/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/developer/dependencies/</guid><description>
&lt;div class="pageinfo pageinfo-primary">
&lt;p>The information below &lt;strong>only&lt;/strong> applies to BeatVortex versions from 0.3 onwards. Installation logic was completely rebuilt in 0.3.0.&lt;/p>
&lt;/div>
&lt;p>Dependency management in Vortex is always a bit of a mess and it's especially so if you're &lt;em>not&lt;/em> using Nexus Mods, which we are definitely not. As it stands, BeatVortex can notify you about missing dependencies but won't automatically install them.&lt;/p>
&lt;blockquote>
&lt;p>We're actively working with the Vortex team to understand how to better support non-Nexus dependencies.&lt;/p>
&lt;/blockquote>
&lt;p>There's some limitations in how Vortex/&lt;code>modmeta-db&lt;/code>/BeatVortex/BeatMods interact that makes this story surprisingly hard.&lt;/p>
&lt;h4 id="beatmods-doesnt-have-md5s-for-archives">BeatMods doesn't have MD5s for archives&lt;/h4>
&lt;p>The backing logic for Vortex's dependency management happens inside the &lt;code>modmeta-db&lt;/code> library. This library allows for querying metadata (including dependencies) using a single identifying key for a mod download: the MD5 sum of the archive. Unfortunately, BeatMods &lt;strong>does not&lt;/strong> store the hash of archive files, only of the individual files. This means we can't do on-demand lookups (through &lt;code>modmeta-db&lt;/code>) for mod files.&lt;/p>
&lt;h4 id="beatmods-does-dependencies-weird">BeatMods does dependencies weird&lt;/h4>
&lt;p>The BeatMods API, for reasons likely lost to time, returns dependencies from the API in a super-weird way: top-level dependencies are fine, but &lt;em>their&lt;/em> dependencies are only returned as document IDs, meaning we can't easily go from a single API call to a full dependency tree.&lt;/p>
&lt;h4 id="vortex-doesnt-fully-implement-modmeta-db">Vortex doesn't fully implement &lt;code>modmeta-db&lt;/code>&lt;/h4>
&lt;p>The backing &lt;code>modmeta-db&lt;/code> supports looking up mod files by a couple of different &amp;ldquo;keys&amp;rdquo;: MD5 hash (see above), logical file name, and custom file expressions. At present, since Nexus uses MD5 hashes, Vortex pretty much only uses the MD5 hash for &lt;em>installation&lt;/em>. That means we can (and do) specify dependency rules, but Vortex won't know where to &lt;em>find&lt;/em> those dependencies.&lt;/p>
&lt;p>In future, we should be able to provide a working meta server that can tell Vortex where to find a particular logical file name/version combo (i.e. the correct file on BeatMods), but this doesn't seem to work exactly right at current.&lt;/p>
&lt;blockquote>
&lt;p>It's our understanding that BeatVortex is the only game extension handling non-Nexus dependencies so this is uncharted ground.&lt;/p>
&lt;/blockquote>
&lt;h4 id="beatmods-provides-only-basic-dependency-information">BeatMods provides only basic dependency information&lt;/h4>
&lt;p>BeatMods dependencies can essentially be summarised down to a mod name and specific version. In practice, this is generally &lt;em>enough&lt;/em> and mod managers (whether it's BeatVortex or Mod Assistant) can just install that version. The only problem here is that we are now locking depenencies to very specific package versions which Vortex now has to take a hard-and-fast restriction.&lt;/p>
&lt;p>As a middle ground, BeatVortex assumes that mod authors are following Semantic Versioning (SemVer) correctly and matches major versions only. That means that, for example, a mod asking for SongCore 2.7.5 could have SongCore 2.9.x installed.&lt;/p>
&lt;blockquote>
&lt;p>We're using the &lt;code>~&lt;/code> operator for those already familiar with the Node/npm semver format.&lt;/p>
&lt;/blockquote></description></item><item><title>Docs: Docs Contributions</title><link>/docs/developer/docs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/developer/docs/</guid><description>
&lt;p>Ironically, the documentation side of the project has slightly higher environment requirements than the project itself! We're using the Hugo static site generator with the Docsy template, so you will need to have a recent version of Hugo Extended installed, as well as &lt;code>npm&lt;/code> to restore the required tools.&lt;/p>
&lt;p>Actual docs content is all stored in the &lt;code>content/&lt;/code> directory, organised under language. At this time only English (&lt;code>en&lt;/code>) is included, although translations are more than welcome!&lt;/p></description></item></channel></rss>